#!/bin/bash

# The CP4WAIOps status checker tool prints out several components to indicate the status of your install.
# In a successful install, the components below should all have a successful STATUS/PROGRESS/PHASE indicator.
# If any of the components are incomplete or are not reconciled after a significant period of time, 
# please refer to the IBM troubleshooting docs online or open a support case. 

# Various formatting elements
newline='\n\n'
red=$(tput setaf 1)
green=$(tput setaf 2)
blue=$(tput setaf 4)
white=$(tput setaf 7)
bold=$(tput bold)
normal=$(tput sgr0) #reset color/bolding

# Get installation namespace (inferred from location of orchestrator pod)
PROJECT_NAMESPACE=$(oc get pods --all-namespaces|grep ibm-aiops-orchestrator|awk '{print $1}')

# optional argument handling
if [[ "$1" == "version" ]]
then
    echo "0.0.2"
    exit 0
fi

# optional argument handling
if [[ "$1" == "config" ]]
then
    echo "$KUBECONFIG"
    exit 0
fi

# optional argument handling
if [[ "$1" == "status" ]]
then
    oc get installations.orchestrator.aiops.ibm.com -A && echo "" &&  oc get ircore,AIOpsAnalyticsOrchestrator -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\"Ready\")].reason" && echo "" && oc get lifecycleservice -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\"Lifecycle Service Ready\")].reason" && echo "" && oc get BaseUI -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.conditions[?(@.type==\"Ready\")].reason" && echo "" && oc get AIManager,aiopsedge,asm -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.phase"
    echo "" && oc get automationuiconfig,automationbase,cartridge,cartridgerequirements -A -o custom-columns='KIND:.kind,NAMESPACE:.metadata.namespace,NAME:.metadata.name,STATUS:.status.conditions[?(@.type=="Ready")].status'
    echo "" && oc get zenservice -A -o custom-columns='KIND:.kind,NAME:.metadata.name,NAMESPACE:.metadata.namespace,STATUS:.status.zenStatus,PROGRESS:.status.Progress,MESSAGE:.status.ProgressMessage'
    exit 0
fi

# optional argument handling
if [[ "$1" == "upgrade-status" ]]
then
    # Script to check upgrade status of CP4WAIOps install for v3.3
    # This script checks to see if your Cloud Pak for Watson AIOps
    # instance is properly configured post-upgrade for v3.3. 

    FAILING_UPGRADE=""
    SUCCESSFULLY_UPGRADED=""

    oc project ${PROJECT_NAMESPACE}

    aiopsEdgeBaseUpgradeStatus() {    
        UPGRADED=$(oc get aiopsedge aiopsedge -o jsonpath='{.status.conditions[?(@.type=="UpgradeReady")].status}')
        DETAILS=$(oc get aiopsedge -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,STATUS:status.phase")
        if [ "${UPGRADED}" == "True" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    aiopsUIUpgradeStatus() {    
        CURRENT_MAJOR_VERSION=$(oc get aiopsui aiopsui-instance -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get aiopsui -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled")
        if [ "${CURRENT_MAJOR_VERSION}" == "3.3" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    kongUpgradeStatus() {    
        INITIALIZED=$(oc get kong gateway -o jsonpath='{.status.conditions[?(@.type=="Initialized")].status}')
        DEPLOYED=$(oc get kong gateway -o jsonpath='{.status.conditions[?(@.type=="Deployed")].status}')
        DETAILS=$(oc get kong -A -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name")
        if [ "${INITIALIZED}" == "True" ] && [ "${DEPLOYED}" == "True" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    aiManagerUpgradeStatus() {    
        PHASE_STATUS=$(oc get aimanager aimanager -o jsonpath='{.status.phase}')
        CURRENT_MAJOR_VERSION=$(oc get aimanager aimanager -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get aimanager -A -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.phase")
        if [ "${PHASE_STATUS}" == "Completed" ] && [ "${CURRENT_MAJOR_VERSION}" == "2.4" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    irCoreUpgradeStatus() {
        UPGRADED=$(oc get ircore aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        METADATA_GENERATION=$(oc get ircore aiops -o jsonpath='{.metadata.generation}')   
        OBSERVED_GENERATION=$(oc get ircore aiops -o jsonpath='{.status.conditions[].observedGeneration}')        
        CURRENT_MAJOR_VERSION=$(oc get ircore aiops -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get ircore -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].reason")
        if [ "${UPGRADED}" == "True" ] && [ "${OBSERVED_GENERATION}" == ${METADATA_GENERATION} ] && [ "${CURRENT_MAJOR_VERSION}" == "3.3" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    lifecycleUpgradeStatus() {      
        UPGRADED=$(oc get lifecycleservices aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        METADATA_GENERATION=$(oc get lifecycleservices aiops -o jsonpath='{.metadata.generation}')   
        OBSERVED_GENERATION=$(oc get lifecycleservices aiops -o jsonpath='{.status.observedGeneration}')
        CURRENT_MAJOR_VERSION=$(oc get lifecycleservices aiops -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get lifecycleservice -A -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Lifecycle Service Ready\")].reason")
        if [ "${UPGRADED}" == "True" ] && [ "${OBSERVED_GENERATION}" == ${METADATA_GENERATION} ] && [ "${CURRENT_MAJOR_VERSION}" == "3.3" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    aiopsAnalyticsUpgradeStatus() {
        UPGRADED=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
        METADATA_GENERATION=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.metadata.generation}')   
        OBSERVED_GENERATION=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.status.observedGeneration}')
        CURRENT_MAJOR_VERSION=$(oc get AIOpsAnalyticsOrchestrator aiops -o jsonpath='{.status.versions.reconciled}' | cut -c1-3)
        DETAILS=$(oc get AIOpsAnalyticsOrchestrator -A  -o custom-columns="KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,VERSION:status.versions.reconciled,STATUS:status.conditions[?(@.type==\"Ready\")].reason")
        if [ "${UPGRADED}" == "True" ] && [ "${OBSERVED_GENERATION}" == ${METADATA_GENERATION} ] && [ "${CURRENT_MAJOR_VERSION}" == "3.2" ];
        then 
            SUCCESSFULLY_UPGRADED+="${newline}${DETAILS}"
            return 0;
        else 
            FAILING_UPGRADE+="${newline}${DETAILS}"
            return 1;
        fi
    }

    # Run component status checks
    aiopsEdgeBaseUpgradeStatus
    lifecycleUpgradeStatus
    aiopsUIUpgradeStatus
    kongUpgradeStatus
    aiManagerUpgradeStatus
    irCoreUpgradeStatus
    aiopsAnalyticsUpgradeStatus

    # Print out results of status checks
    printf "
${bold}${green}______________________________________________________________

The following component(s) have finished upgrading:
${normal}${SUCCESSFULLY_UPGRADED}

${bold}${green}______________________________________________________________
"
    if [ "$FAILING_UPGRADE" != "" ];
    then 
        printf "
${bold}${red}______________________________________________________________

Meanwhile, the following component(s) have not upgraded yet:
${normal}${FAILING_UPGRADE}

If only a short time has passed since the upgrade was started, the components may
need more time to complete upgrading. If you have waited a significant amount of time
and the statuses of the components listed below are not changing, please refer to
the troubleshooting docs or open a support case.

${bold}${red}______________________________________________________________
";
    fi

    printf "
${blue}${bold}Hint: for a more detailed printout of each operator's components' statuses, run \`oc waiops status\`.
${normal}
"
    exit 0
fi

echo "kubectl-waiops"
